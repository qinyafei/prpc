// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jobdispatch.proto

#ifndef PROTOBUF_jobdispatch_2eproto__INCLUDED
#define PROTOBUF_jobdispatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace JobDispatch {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_jobdispatch_2eproto();
void protobuf_AssignDesc_jobdispatch_2eproto();
void protobuf_ShutdownFile_jobdispatch_2eproto();

class TaskEntity;
class TaskRequest;
class TaskResponse;

// ===================================================================

class TaskEntity : public ::google::protobuf::Message {
 public:
  TaskEntity();
  virtual ~TaskEntity();

  TaskEntity(const TaskEntity& from);

  inline TaskEntity& operator=(const TaskEntity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskEntity& default_instance();

  void Swap(TaskEntity* other);

  // implements Message ----------------------------------------------

  inline TaskEntity* New() const { return New(NULL); }

  TaskEntity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskEntity& from);
  void MergeFrom(const TaskEntity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskEntity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string tasktype = 3;
  bool has_tasktype() const;
  void clear_tasktype();
  static const int kTasktypeFieldNumber = 3;
  const ::std::string& tasktype() const;
  void set_tasktype(const ::std::string& value);
  void set_tasktype(const char* value);
  void set_tasktype(const char* value, size_t size);
  ::std::string* mutable_tasktype();
  ::std::string* release_tasktype();
  void set_allocated_tasktype(::std::string* tasktype);

  // required string timemode = 4;
  bool has_timemode() const;
  void clear_timemode();
  static const int kTimemodeFieldNumber = 4;
  const ::std::string& timemode() const;
  void set_timemode(const ::std::string& value);
  void set_timemode(const char* value);
  void set_timemode(const char* value, size_t size);
  ::std::string* mutable_timemode();
  ::std::string* release_timemode();
  void set_allocated_timemode(::std::string* timemode);

  // required string plantimer = 5;
  bool has_plantimer() const;
  void clear_plantimer();
  static const int kPlantimerFieldNumber = 5;
  const ::std::string& plantimer() const;
  void set_plantimer(const ::std::string& value);
  void set_plantimer(const char* value);
  void set_plantimer(const char* value, size_t size);
  ::std::string* mutable_plantimer();
  ::std::string* release_plantimer();
  void set_allocated_plantimer(::std::string* plantimer);

  // optional string args = 6;
  bool has_args() const;
  void clear_args();
  static const int kArgsFieldNumber = 6;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // optional string result = 7;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 7;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // optional string remarks = 8;
  bool has_remarks() const;
  void clear_remarks();
  static const int kRemarksFieldNumber = 8;
  const ::std::string& remarks() const;
  void set_remarks(const ::std::string& value);
  void set_remarks(const char* value);
  void set_remarks(const char* value, size_t size);
  ::std::string* mutable_remarks();
  ::std::string* release_remarks();
  void set_allocated_remarks(::std::string* remarks);

  // @@protoc_insertion_point(class_scope:JobDispatch.TaskEntity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_timemode();
  inline void clear_has_timemode();
  inline void set_has_plantimer();
  inline void clear_has_plantimer();
  inline void set_has_args();
  inline void clear_has_args();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_remarks();
  inline void clear_has_remarks();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr tasktype_;
  ::google::protobuf::internal::ArenaStringPtr timemode_;
  ::google::protobuf::internal::ArenaStringPtr plantimer_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr remarks_;
  friend void  protobuf_AddDesc_jobdispatch_2eproto();
  friend void protobuf_AssignDesc_jobdispatch_2eproto();
  friend void protobuf_ShutdownFile_jobdispatch_2eproto();

  void InitAsDefaultInstance();
  static TaskEntity* default_instance_;
};
// -------------------------------------------------------------------

class TaskRequest : public ::google::protobuf::Message {
 public:
  TaskRequest();
  virtual ~TaskRequest();

  TaskRequest(const TaskRequest& from);

  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRequest& default_instance();

  void Swap(TaskRequest* other);

  // implements Message ----------------------------------------------

  inline TaskRequest* New() const { return New(NULL); }

  TaskRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskRequest& from);
  void MergeFrom(const TaskRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .JobDispatch.TaskEntity task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::JobDispatch::TaskEntity& task() const;
  ::JobDispatch::TaskEntity* mutable_task();
  ::JobDispatch::TaskEntity* release_task();
  void set_allocated_task(::JobDispatch::TaskEntity* task);

  // @@protoc_insertion_point(class_scope:JobDispatch.TaskRequest)
 private:
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::JobDispatch::TaskEntity* task_;
  friend void  protobuf_AddDesc_jobdispatch_2eproto();
  friend void protobuf_AssignDesc_jobdispatch_2eproto();
  friend void protobuf_ShutdownFile_jobdispatch_2eproto();

  void InitAsDefaultInstance();
  static TaskRequest* default_instance_;
};
// -------------------------------------------------------------------

class TaskResponse : public ::google::protobuf::Message {
 public:
  TaskResponse();
  virtual ~TaskResponse();

  TaskResponse(const TaskResponse& from);

  inline TaskResponse& operator=(const TaskResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskResponse& default_instance();

  void Swap(TaskResponse* other);

  // implements Message ----------------------------------------------

  inline TaskResponse* New() const { return New(NULL); }

  TaskResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskResponse& from);
  void MergeFrom(const TaskResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:JobDispatch.TaskResponse)
 private:
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  friend void  protobuf_AddDesc_jobdispatch_2eproto();
  friend void protobuf_AssignDesc_jobdispatch_2eproto();
  friend void protobuf_ShutdownFile_jobdispatch_2eproto();

  void InitAsDefaultInstance();
  static TaskResponse* default_instance_;
};
// ===================================================================

class JobDispatchService_Stub;

class JobDispatchService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline JobDispatchService() {};
 public:
  virtual ~JobDispatchService();

  typedef JobDispatchService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void add(::google::protobuf::RpcController* controller,
                       const ::JobDispatch::TaskRequest* request,
                       ::JobDispatch::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void del(::google::protobuf::RpcController* controller,
                       const ::JobDispatch::TaskRequest* request,
                       ::JobDispatch::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void edit(::google::protobuf::RpcController* controller,
                       const ::JobDispatch::TaskRequest* request,
                       ::JobDispatch::TaskResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(JobDispatchService);
};

class JobDispatchService_Stub : public JobDispatchService {
 public:
  JobDispatchService_Stub(::google::protobuf::RpcChannel* channel);
  JobDispatchService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~JobDispatchService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements JobDispatchService ------------------------------------------

  void add(::google::protobuf::RpcController* controller,
                       const ::JobDispatch::TaskRequest* request,
                       ::JobDispatch::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  void del(::google::protobuf::RpcController* controller,
                       const ::JobDispatch::TaskRequest* request,
                       ::JobDispatch::TaskResponse* response,
                       ::google::protobuf::Closure* done);
  void edit(::google::protobuf::RpcController* controller,
                       const ::JobDispatch::TaskRequest* request,
                       ::JobDispatch::TaskResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(JobDispatchService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskEntity

// required string id = 1;
inline bool TaskEntity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskEntity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskEntity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskEntity::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TaskEntity::id() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.id)
}
inline void TaskEntity::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.id)
}
inline void TaskEntity::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.id)
}
inline ::std::string* TaskEntity::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.id)
}

// required string name = 2;
inline bool TaskEntity::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskEntity::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskEntity::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskEntity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TaskEntity::name() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.name)
}
inline void TaskEntity::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.name)
}
inline void TaskEntity::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.name)
}
inline ::std::string* TaskEntity::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.name)
}

// required string tasktype = 3;
inline bool TaskEntity::has_tasktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskEntity::set_has_tasktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskEntity::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskEntity::clear_tasktype() {
  tasktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tasktype();
}
inline const ::std::string& TaskEntity::tasktype() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.tasktype)
  return tasktype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_tasktype(const ::std::string& value) {
  set_has_tasktype();
  tasktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.tasktype)
}
inline void TaskEntity::set_tasktype(const char* value) {
  set_has_tasktype();
  tasktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.tasktype)
}
inline void TaskEntity::set_tasktype(const char* value, size_t size) {
  set_has_tasktype();
  tasktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.tasktype)
}
inline ::std::string* TaskEntity::mutable_tasktype() {
  set_has_tasktype();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.tasktype)
  return tasktype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_tasktype() {
  clear_has_tasktype();
  return tasktype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_tasktype(::std::string* tasktype) {
  if (tasktype != NULL) {
    set_has_tasktype();
  } else {
    clear_has_tasktype();
  }
  tasktype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tasktype);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.tasktype)
}

// required string timemode = 4;
inline bool TaskEntity::has_timemode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskEntity::set_has_timemode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskEntity::clear_has_timemode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskEntity::clear_timemode() {
  timemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timemode();
}
inline const ::std::string& TaskEntity::timemode() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.timemode)
  return timemode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_timemode(const ::std::string& value) {
  set_has_timemode();
  timemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.timemode)
}
inline void TaskEntity::set_timemode(const char* value) {
  set_has_timemode();
  timemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.timemode)
}
inline void TaskEntity::set_timemode(const char* value, size_t size) {
  set_has_timemode();
  timemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.timemode)
}
inline ::std::string* TaskEntity::mutable_timemode() {
  set_has_timemode();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.timemode)
  return timemode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_timemode() {
  clear_has_timemode();
  return timemode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_timemode(::std::string* timemode) {
  if (timemode != NULL) {
    set_has_timemode();
  } else {
    clear_has_timemode();
  }
  timemode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timemode);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.timemode)
}

// required string plantimer = 5;
inline bool TaskEntity::has_plantimer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskEntity::set_has_plantimer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskEntity::clear_has_plantimer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskEntity::clear_plantimer() {
  plantimer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plantimer();
}
inline const ::std::string& TaskEntity::plantimer() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.plantimer)
  return plantimer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_plantimer(const ::std::string& value) {
  set_has_plantimer();
  plantimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.plantimer)
}
inline void TaskEntity::set_plantimer(const char* value) {
  set_has_plantimer();
  plantimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.plantimer)
}
inline void TaskEntity::set_plantimer(const char* value, size_t size) {
  set_has_plantimer();
  plantimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.plantimer)
}
inline ::std::string* TaskEntity::mutable_plantimer() {
  set_has_plantimer();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.plantimer)
  return plantimer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_plantimer() {
  clear_has_plantimer();
  return plantimer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_plantimer(::std::string* plantimer) {
  if (plantimer != NULL) {
    set_has_plantimer();
  } else {
    clear_has_plantimer();
  }
  plantimer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plantimer);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.plantimer)
}

// optional string args = 6;
inline bool TaskEntity::has_args() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskEntity::set_has_args() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskEntity::clear_has_args() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskEntity::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
inline const ::std::string& TaskEntity::args() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.args)
}
inline void TaskEntity::set_args(const char* value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.args)
}
inline void TaskEntity::set_args(const char* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.args)
}
inline ::std::string* TaskEntity::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_args() {
  clear_has_args();
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.args)
}

// optional string result = 7;
inline bool TaskEntity::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskEntity::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskEntity::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskEntity::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result();
}
inline const ::std::string& TaskEntity::result() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_result(const ::std::string& value) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.result)
}
inline void TaskEntity::set_result(const char* value) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.result)
}
inline void TaskEntity::set_result(const char* value, size_t size) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.result)
}
inline ::std::string* TaskEntity::mutable_result() {
  set_has_result();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_result() {
  clear_has_result();
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    set_has_result();
  } else {
    clear_has_result();
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.result)
}

// optional string remarks = 8;
inline bool TaskEntity::has_remarks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskEntity::set_has_remarks() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskEntity::clear_has_remarks() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskEntity::clear_remarks() {
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remarks();
}
inline const ::std::string& TaskEntity::remarks() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.remarks)
  return remarks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_remarks(const ::std::string& value) {
  set_has_remarks();
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.remarks)
}
inline void TaskEntity::set_remarks(const char* value) {
  set_has_remarks();
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.remarks)
}
inline void TaskEntity::set_remarks(const char* value, size_t size) {
  set_has_remarks();
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.remarks)
}
inline ::std::string* TaskEntity::mutable_remarks() {
  set_has_remarks();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.remarks)
  return remarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskEntity::release_remarks() {
  clear_has_remarks();
  return remarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskEntity::set_allocated_remarks(::std::string* remarks) {
  if (remarks != NULL) {
    set_has_remarks();
  } else {
    clear_has_remarks();
  }
  remarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remarks);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.remarks)
}

// -------------------------------------------------------------------

// TaskRequest

// required .JobDispatch.TaskEntity task = 1;
inline bool TaskRequest::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskRequest::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskRequest::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskRequest::clear_task() {
  if (task_ != NULL) task_->::JobDispatch::TaskEntity::Clear();
  clear_has_task();
}
inline const ::JobDispatch::TaskEntity& TaskRequest::task() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskRequest.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::JobDispatch::TaskEntity* TaskRequest::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::JobDispatch::TaskEntity;
  }
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskRequest.task)
  return task_;
}
inline ::JobDispatch::TaskEntity* TaskRequest::release_task() {
  clear_has_task();
  ::JobDispatch::TaskEntity* temp = task_;
  task_ = NULL;
  return temp;
}
inline void TaskRequest::set_allocated_task(::JobDispatch::TaskEntity* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskRequest.task)
}

// -------------------------------------------------------------------

// TaskResponse

// optional string response = 1;
inline bool TaskResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
inline const ::std::string& TaskResponse::response() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskResponse.response)
  return response_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResponse::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskResponse.response)
}
inline void TaskResponse::set_response(const char* value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskResponse.response)
}
inline void TaskResponse::set_response(const char* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskResponse.response)
}
inline ::std::string* TaskResponse::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResponse::release_response() {
  clear_has_response();
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskResponse.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace JobDispatch

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_jobdispatch_2eproto__INCLUDED
