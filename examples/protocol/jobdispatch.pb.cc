// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jobdispatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jobdispatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace JobDispatch {

namespace {

const ::google::protobuf::Descriptor* TaskEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* JobDispatchService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_jobdispatch_2eproto() {
  protobuf_AddDesc_jobdispatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jobdispatch.proto");
  GOOGLE_CHECK(file != NULL);
  TaskEntity_descriptor_ = file->message_type(0);
  static const int TaskEntity_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, timemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, plantimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, remarks_),
  };
  TaskEntity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskEntity_descriptor_,
      TaskEntity::default_instance_,
      TaskEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, _has_bits_[0]),
      -1,
      -1,
      sizeof(TaskEntity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEntity, _internal_metadata_),
      -1);
  TaskRequest_descriptor_ = file->message_type(1);
  static const int TaskRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRequest, task_),
  };
  TaskRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskRequest_descriptor_,
      TaskRequest::default_instance_,
      TaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(TaskRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRequest, _internal_metadata_),
      -1);
  TaskResponse_descriptor_ = file->message_type(2);
  static const int TaskResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResponse, response_),
  };
  TaskResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskResponse_descriptor_,
      TaskResponse::default_instance_,
      TaskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(TaskResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResponse, _internal_metadata_),
      -1);
  JobDispatchService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jobdispatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskEntity_descriptor_, &TaskEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskRequest_descriptor_, &TaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskResponse_descriptor_, &TaskResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jobdispatch_2eproto() {
  delete TaskEntity::default_instance_;
  delete TaskEntity_reflection_;
  delete TaskRequest::default_instance_;
  delete TaskRequest_reflection_;
  delete TaskResponse::default_instance_;
  delete TaskResponse_reflection_;
}

void protobuf_AddDesc_jobdispatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021jobdispatch.proto\022\013JobDispatch\"\214\001\n\nTas"
    "kEntity\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010tas"
    "ktype\030\003 \002(\t\022\020\n\010timemode\030\004 \002(\t\022\021\n\tplantim"
    "er\030\005 \002(\t\022\014\n\004args\030\006 \001(\t\022\016\n\006result\030\007 \001(\t\022\017"
    "\n\007remarks\030\010 \001(\t\"4\n\013TaskRequest\022%\n\004task\030\001"
    " \002(\0132\027.JobDispatch.TaskEntity\" \n\014TaskRes"
    "ponse\022\020\n\010response\030\001 \001(\t2\311\001\n\022JobDispatchS"
    "ervice\022:\n\003add\022\030.JobDispatch.TaskRequest\032"
    "\031.JobDispatch.TaskResponse\022:\n\003del\022\030.JobD"
    "ispatch.TaskRequest\032\031.JobDispatch.TaskRe"
    "sponse\022;\n\004edit\022\030.JobDispatch.TaskRequest"
    "\032\031.JobDispatch.TaskResponseB\003\200\001\001", 472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jobdispatch.proto", &protobuf_RegisterTypes);
  TaskEntity::default_instance_ = new TaskEntity();
  TaskRequest::default_instance_ = new TaskRequest();
  TaskResponse::default_instance_ = new TaskResponse();
  TaskEntity::default_instance_->InitAsDefaultInstance();
  TaskRequest::default_instance_->InitAsDefaultInstance();
  TaskResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jobdispatch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jobdispatch_2eproto {
  StaticDescriptorInitializer_jobdispatch_2eproto() {
    protobuf_AddDesc_jobdispatch_2eproto();
  }
} static_descriptor_initializer_jobdispatch_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int TaskEntity::kIdFieldNumber;
const int TaskEntity::kNameFieldNumber;
const int TaskEntity::kTasktypeFieldNumber;
const int TaskEntity::kTimemodeFieldNumber;
const int TaskEntity::kPlantimerFieldNumber;
const int TaskEntity::kArgsFieldNumber;
const int TaskEntity::kResultFieldNumber;
const int TaskEntity::kRemarksFieldNumber;
#endif  // !_MSC_VER

TaskEntity::TaskEntity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobDispatch.TaskEntity)
}

void TaskEntity::InitAsDefaultInstance() {
}

TaskEntity::TaskEntity(const TaskEntity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobDispatch.TaskEntity)
}

void TaskEntity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tasktype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timemode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plantimer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskEntity::~TaskEntity() {
  // @@protoc_insertion_point(destructor:JobDispatch.TaskEntity)
  SharedDtor();
}

void TaskEntity::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tasktype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timemode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plantimer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TaskEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskEntity_descriptor_;
}

const TaskEntity& TaskEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jobdispatch_2eproto();
  return *default_instance_;
}

TaskEntity* TaskEntity::default_instance_ = NULL;

TaskEntity* TaskEntity::New(::google::protobuf::Arena* arena) const {
  TaskEntity* n = new TaskEntity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskEntity::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tasktype()) {
      tasktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timemode()) {
      timemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_plantimer()) {
      plantimer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_args()) {
      args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_result()) {
      result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_remarks()) {
      remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobDispatch.TaskEntity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tasktype;
        break;
      }

      // required string tasktype = 3;
      case 3: {
        if (tag == 26) {
         parse_tasktype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tasktype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tasktype().data(), this->tasktype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.tasktype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timemode;
        break;
      }

      // required string timemode = 4;
      case 4: {
        if (tag == 34) {
         parse_timemode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timemode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timemode().data(), this->timemode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.timemode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_plantimer;
        break;
      }

      // required string plantimer = 5;
      case 5: {
        if (tag == 42) {
         parse_plantimer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plantimer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plantimer().data(), this->plantimer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.plantimer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_args;
        break;
      }

      // optional string args = 6;
      case 6: {
        if (tag == 50) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_result;
        break;
      }

      // optional string result = 7;
      case 7: {
        if (tag == 58) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_remarks;
        break;
      }

      // optional string remarks = 8;
      case 8: {
        if (tag == 66) {
         parse_remarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remarks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remarks().data(), this->remarks().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskEntity.remarks");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobDispatch.TaskEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobDispatch.TaskEntity)
  return false;
#undef DO_
}

void TaskEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobDispatch.TaskEntity)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string tasktype = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tasktype().data(), this->tasktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.tasktype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tasktype(), output);
  }

  // required string timemode = 4;
  if (has_timemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timemode().data(), this->timemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.timemode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->timemode(), output);
  }

  // required string plantimer = 5;
  if (has_plantimer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plantimer().data(), this->plantimer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.plantimer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->plantimer(), output);
  }

  // optional string args = 6;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->args(), output);
  }

  // optional string result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->result(), output);
  }

  // optional string remarks = 8;
  if (has_remarks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remarks().data(), this->remarks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.remarks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->remarks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobDispatch.TaskEntity)
}

::google::protobuf::uint8* TaskEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobDispatch.TaskEntity)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string tasktype = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tasktype().data(), this->tasktype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.tasktype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tasktype(), target);
  }

  // required string timemode = 4;
  if (has_timemode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timemode().data(), this->timemode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.timemode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->timemode(), target);
  }

  // required string plantimer = 5;
  if (has_plantimer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plantimer().data(), this->plantimer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.plantimer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->plantimer(), target);
  }

  // optional string args = 6;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->args(), target);
  }

  // optional string result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->result(), target);
  }

  // optional string remarks = 8;
  if (has_remarks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remarks().data(), this->remarks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskEntity.remarks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->remarks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobDispatch.TaskEntity)
  return target;
}

int TaskEntity::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_tasktype()) {
    // required string tasktype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tasktype());
  }

  if (has_timemode()) {
    // required string timemode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timemode());
  }

  if (has_plantimer()) {
    // required string plantimer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plantimer());
  }

  return total_size;
}
int TaskEntity::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string tasktype = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tasktype());

    // required string timemode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timemode());

    // required string plantimer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plantimer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional string args = 6;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional string result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

    // optional string remarks = 8;
    if (has_remarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remarks());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskEntity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskEntity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskEntity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskEntity::MergeFrom(const TaskEntity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_tasktype()) {
      set_has_tasktype();
      tasktype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tasktype_);
    }
    if (from.has_timemode()) {
      set_has_timemode();
      timemode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timemode_);
    }
    if (from.has_plantimer()) {
      set_has_plantimer();
      plantimer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plantimer_);
    }
    if (from.has_args()) {
      set_has_args();
      args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
    }
    if (from.has_result()) {
      set_has_result();
      result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
    }
    if (from.has_remarks()) {
      set_has_remarks();
      remarks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remarks_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TaskEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskEntity::CopyFrom(const TaskEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TaskEntity::Swap(TaskEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskEntity::InternalSwap(TaskEntity* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  tasktype_.Swap(&other->tasktype_);
  timemode_.Swap(&other->timemode_);
  plantimer_.Swap(&other->plantimer_);
  args_.Swap(&other->args_);
  result_.Swap(&other->result_);
  remarks_.Swap(&other->remarks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskEntity_descriptor_;
  metadata.reflection = TaskEntity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskEntity

// required string id = 1;
bool TaskEntity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskEntity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskEntity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskEntity::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& TaskEntity::id() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.id)
}
 void TaskEntity::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.id)
}
 void TaskEntity::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.id)
}
 ::std::string* TaskEntity::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.id)
}

// required string name = 2;
bool TaskEntity::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskEntity::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskEntity::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskEntity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& TaskEntity::name() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.name)
}
 void TaskEntity::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.name)
}
 void TaskEntity::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.name)
}
 ::std::string* TaskEntity::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.name)
}

// required string tasktype = 3;
bool TaskEntity::has_tasktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskEntity::set_has_tasktype() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskEntity::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskEntity::clear_tasktype() {
  tasktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tasktype();
}
 const ::std::string& TaskEntity::tasktype() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.tasktype)
  return tasktype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_tasktype(const ::std::string& value) {
  set_has_tasktype();
  tasktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.tasktype)
}
 void TaskEntity::set_tasktype(const char* value) {
  set_has_tasktype();
  tasktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.tasktype)
}
 void TaskEntity::set_tasktype(const char* value, size_t size) {
  set_has_tasktype();
  tasktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.tasktype)
}
 ::std::string* TaskEntity::mutable_tasktype() {
  set_has_tasktype();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.tasktype)
  return tasktype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_tasktype() {
  clear_has_tasktype();
  return tasktype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_tasktype(::std::string* tasktype) {
  if (tasktype != NULL) {
    set_has_tasktype();
  } else {
    clear_has_tasktype();
  }
  tasktype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tasktype);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.tasktype)
}

// required string timemode = 4;
bool TaskEntity::has_timemode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TaskEntity::set_has_timemode() {
  _has_bits_[0] |= 0x00000008u;
}
void TaskEntity::clear_has_timemode() {
  _has_bits_[0] &= ~0x00000008u;
}
void TaskEntity::clear_timemode() {
  timemode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timemode();
}
 const ::std::string& TaskEntity::timemode() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.timemode)
  return timemode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_timemode(const ::std::string& value) {
  set_has_timemode();
  timemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.timemode)
}
 void TaskEntity::set_timemode(const char* value) {
  set_has_timemode();
  timemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.timemode)
}
 void TaskEntity::set_timemode(const char* value, size_t size) {
  set_has_timemode();
  timemode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.timemode)
}
 ::std::string* TaskEntity::mutable_timemode() {
  set_has_timemode();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.timemode)
  return timemode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_timemode() {
  clear_has_timemode();
  return timemode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_timemode(::std::string* timemode) {
  if (timemode != NULL) {
    set_has_timemode();
  } else {
    clear_has_timemode();
  }
  timemode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timemode);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.timemode)
}

// required string plantimer = 5;
bool TaskEntity::has_plantimer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TaskEntity::set_has_plantimer() {
  _has_bits_[0] |= 0x00000010u;
}
void TaskEntity::clear_has_plantimer() {
  _has_bits_[0] &= ~0x00000010u;
}
void TaskEntity::clear_plantimer() {
  plantimer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plantimer();
}
 const ::std::string& TaskEntity::plantimer() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.plantimer)
  return plantimer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_plantimer(const ::std::string& value) {
  set_has_plantimer();
  plantimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.plantimer)
}
 void TaskEntity::set_plantimer(const char* value) {
  set_has_plantimer();
  plantimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.plantimer)
}
 void TaskEntity::set_plantimer(const char* value, size_t size) {
  set_has_plantimer();
  plantimer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.plantimer)
}
 ::std::string* TaskEntity::mutable_plantimer() {
  set_has_plantimer();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.plantimer)
  return plantimer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_plantimer() {
  clear_has_plantimer();
  return plantimer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_plantimer(::std::string* plantimer) {
  if (plantimer != NULL) {
    set_has_plantimer();
  } else {
    clear_has_plantimer();
  }
  plantimer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plantimer);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.plantimer)
}

// optional string args = 6;
bool TaskEntity::has_args() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TaskEntity::set_has_args() {
  _has_bits_[0] |= 0x00000020u;
}
void TaskEntity::clear_has_args() {
  _has_bits_[0] &= ~0x00000020u;
}
void TaskEntity::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
 const ::std::string& TaskEntity::args() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.args)
}
 void TaskEntity::set_args(const char* value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.args)
}
 void TaskEntity::set_args(const char* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.args)
}
 ::std::string* TaskEntity::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_args() {
  clear_has_args();
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.args)
}

// optional string result = 7;
bool TaskEntity::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TaskEntity::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
void TaskEntity::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
void TaskEntity::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result();
}
 const ::std::string& TaskEntity::result() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_result(const ::std::string& value) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.result)
}
 void TaskEntity::set_result(const char* value) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.result)
}
 void TaskEntity::set_result(const char* value, size_t size) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.result)
}
 ::std::string* TaskEntity::mutable_result() {
  set_has_result();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_result() {
  clear_has_result();
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    set_has_result();
  } else {
    clear_has_result();
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.result)
}

// optional string remarks = 8;
bool TaskEntity::has_remarks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TaskEntity::set_has_remarks() {
  _has_bits_[0] |= 0x00000080u;
}
void TaskEntity::clear_has_remarks() {
  _has_bits_[0] &= ~0x00000080u;
}
void TaskEntity::clear_remarks() {
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_remarks();
}
 const ::std::string& TaskEntity::remarks() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskEntity.remarks)
  return remarks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_remarks(const ::std::string& value) {
  set_has_remarks();
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskEntity.remarks)
}
 void TaskEntity::set_remarks(const char* value) {
  set_has_remarks();
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskEntity.remarks)
}
 void TaskEntity::set_remarks(const char* value, size_t size) {
  set_has_remarks();
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskEntity.remarks)
}
 ::std::string* TaskEntity::mutable_remarks() {
  set_has_remarks();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskEntity.remarks)
  return remarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskEntity::release_remarks() {
  clear_has_remarks();
  return remarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskEntity::set_allocated_remarks(::std::string* remarks) {
  if (remarks != NULL) {
    set_has_remarks();
  } else {
    clear_has_remarks();
  }
  remarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remarks);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskEntity.remarks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TaskRequest::kTaskFieldNumber;
#endif  // !_MSC_VER

TaskRequest::TaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobDispatch.TaskRequest)
}

void TaskRequest::InitAsDefaultInstance() {
  task_ = const_cast< ::JobDispatch::TaskEntity*>(&::JobDispatch::TaskEntity::default_instance());
}

TaskRequest::TaskRequest(const TaskRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobDispatch.TaskRequest)
}

void TaskRequest::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskRequest::~TaskRequest() {
  // @@protoc_insertion_point(destructor:JobDispatch.TaskRequest)
  SharedDtor();
}

void TaskRequest::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void TaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskRequest_descriptor_;
}

const TaskRequest& TaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jobdispatch_2eproto();
  return *default_instance_;
}

TaskRequest* TaskRequest::default_instance_ = NULL;

TaskRequest* TaskRequest::New(::google::protobuf::Arena* arena) const {
  TaskRequest* n = new TaskRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRequest::Clear() {
  if (has_task()) {
    if (task_ != NULL) task_->::JobDispatch::TaskEntity::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobDispatch.TaskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .JobDispatch.TaskEntity task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobDispatch.TaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobDispatch.TaskRequest)
  return false;
#undef DO_
}

void TaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobDispatch.TaskRequest)
  // required .JobDispatch.TaskEntity task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->task_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobDispatch.TaskRequest)
}

::google::protobuf::uint8* TaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobDispatch.TaskRequest)
  // required .JobDispatch.TaskEntity task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->task_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobDispatch.TaskRequest)
  return target;
}

int TaskRequest::ByteSize() const {
  int total_size = 0;

  // required .JobDispatch.TaskEntity task = 1;
  if (has_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskRequest::MergeFrom(const TaskRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::JobDispatch::TaskEntity::MergeFrom(from.task());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRequest::CopyFrom(const TaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task_->IsInitialized()) return false;
  }
  return true;
}

void TaskRequest::Swap(TaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRequest::InternalSwap(TaskRequest* other) {
  std::swap(task_, other->task_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskRequest_descriptor_;
  metadata.reflection = TaskRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRequest

// required .JobDispatch.TaskEntity task = 1;
bool TaskRequest::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRequest::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRequest::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRequest::clear_task() {
  if (task_ != NULL) task_->::JobDispatch::TaskEntity::Clear();
  clear_has_task();
}
const ::JobDispatch::TaskEntity& TaskRequest::task() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskRequest.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
::JobDispatch::TaskEntity* TaskRequest::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::JobDispatch::TaskEntity;
  }
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskRequest.task)
  return task_;
}
::JobDispatch::TaskEntity* TaskRequest::release_task() {
  clear_has_task();
  ::JobDispatch::TaskEntity* temp = task_;
  task_ = NULL;
  return temp;
}
void TaskRequest::set_allocated_task(::JobDispatch::TaskEntity* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskRequest.task)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TaskResponse::kResponseFieldNumber;
#endif  // !_MSC_VER

TaskResponse::TaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobDispatch.TaskResponse)
}

void TaskResponse::InitAsDefaultInstance() {
}

TaskResponse::TaskResponse(const TaskResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobDispatch.TaskResponse)
}

void TaskResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskResponse::~TaskResponse() {
  // @@protoc_insertion_point(destructor:JobDispatch.TaskResponse)
  SharedDtor();
}

void TaskResponse::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskResponse_descriptor_;
}

const TaskResponse& TaskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jobdispatch_2eproto();
  return *default_instance_;
}

TaskResponse* TaskResponse::default_instance_ = NULL;

TaskResponse* TaskResponse::New(::google::protobuf::Arena* arena) const {
  TaskResponse* n = new TaskResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskResponse::Clear() {
  if (has_response()) {
    response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobDispatch.TaskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "JobDispatch.TaskResponse.response");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobDispatch.TaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobDispatch.TaskResponse)
  return false;
#undef DO_
}

void TaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobDispatch.TaskResponse)
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskResponse.response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobDispatch.TaskResponse)
}

::google::protobuf::uint8* TaskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobDispatch.TaskResponse)
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "JobDispatch.TaskResponse.response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobDispatch.TaskResponse)
  return target;
}

int TaskResponse::ByteSize() const {
  int total_size = 0;

  // optional string response = 1;
  if (has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskResponse::MergeFrom(const TaskResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_has_response();
      response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResponse::CopyFrom(const TaskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResponse::IsInitialized() const {

  return true;
}

void TaskResponse::Swap(TaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskResponse::InternalSwap(TaskResponse* other) {
  response_.Swap(&other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskResponse_descriptor_;
  metadata.reflection = TaskResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskResponse

// optional string response = 1;
bool TaskResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
 const ::std::string& TaskResponse::response() const {
  // @@protoc_insertion_point(field_get:JobDispatch.TaskResponse.response)
  return response_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskResponse::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JobDispatch.TaskResponse.response)
}
 void TaskResponse::set_response(const char* value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobDispatch.TaskResponse.response)
}
 void TaskResponse::set_response(const char* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobDispatch.TaskResponse.response)
}
 ::std::string* TaskResponse::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:JobDispatch.TaskResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TaskResponse::release_response() {
  clear_has_response();
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TaskResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:JobDispatch.TaskResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

JobDispatchService::~JobDispatchService() {}

const ::google::protobuf::ServiceDescriptor* JobDispatchService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDispatchService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* JobDispatchService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDispatchService_descriptor_;
}

void JobDispatchService::add(::google::protobuf::RpcController* controller,
                         const ::JobDispatch::TaskRequest*,
                         ::JobDispatch::TaskResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add() not implemented.");
  done->Run();
}

void JobDispatchService::del(::google::protobuf::RpcController* controller,
                         const ::JobDispatch::TaskRequest*,
                         ::JobDispatch::TaskResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method del() not implemented.");
  done->Run();
}

void JobDispatchService::edit(::google::protobuf::RpcController* controller,
                         const ::JobDispatch::TaskRequest*,
                         ::JobDispatch::TaskResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method edit() not implemented.");
  done->Run();
}

void JobDispatchService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), JobDispatchService_descriptor_);
  switch(method->index()) {
    case 0:
      add(controller,
             ::google::protobuf::down_cast<const ::JobDispatch::TaskRequest*>(request),
             ::google::protobuf::down_cast< ::JobDispatch::TaskResponse*>(response),
             done);
      break;
    case 1:
      del(controller,
             ::google::protobuf::down_cast<const ::JobDispatch::TaskRequest*>(request),
             ::google::protobuf::down_cast< ::JobDispatch::TaskResponse*>(response),
             done);
      break;
    case 2:
      edit(controller,
             ::google::protobuf::down_cast<const ::JobDispatch::TaskRequest*>(request),
             ::google::protobuf::down_cast< ::JobDispatch::TaskResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& JobDispatchService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::JobDispatch::TaskRequest::default_instance();
    case 1:
      return ::JobDispatch::TaskRequest::default_instance();
    case 2:
      return ::JobDispatch::TaskRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& JobDispatchService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::JobDispatch::TaskResponse::default_instance();
    case 1:
      return ::JobDispatch::TaskResponse::default_instance();
    case 2:
      return ::JobDispatch::TaskResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *static_cast< ::google::protobuf::Message*>(NULL);
  }
}

JobDispatchService_Stub::JobDispatchService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
JobDispatchService_Stub::JobDispatchService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
JobDispatchService_Stub::~JobDispatchService_Stub() {
  if (owns_channel_) delete channel_;
}

void JobDispatchService_Stub::add(::google::protobuf::RpcController* controller,
                              const ::JobDispatch::TaskRequest* request,
                              ::JobDispatch::TaskResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void JobDispatchService_Stub::del(::google::protobuf::RpcController* controller,
                              const ::JobDispatch::TaskRequest* request,
                              ::JobDispatch::TaskResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void JobDispatchService_Stub::edit(::google::protobuf::RpcController* controller,
                              const ::JobDispatch::TaskRequest* request,
                              ::JobDispatch::TaskResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace JobDispatch

// @@protoc_insertion_point(global_scope)
